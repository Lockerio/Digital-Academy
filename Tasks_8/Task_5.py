"""
Дано: степень прозрачности, как целое число.

Задание. У Николы появилось свободное время и он решил заняться исследованием
привидений. Он хочет найти способ, как определять возраст привидений.
Согласно древним фолиантам, возраст связан со степенью прозрачности
призраков. Никола составил шкалу измерений прозрачности от 10000 до 0,
где 10000 - это совсем непрозрачное "новорождённое" привидение (0 лет)
и 0 - это уже невидимка (возраст неизвестен).

После множества экспериментов, Никола кажется начел взаимосвязь. На каждый
"день рождения", степень прозрачности привидения уменьшается на количество
единиц, равное его возрасту, если возраст есть одно из чисел Фибоначчи
(подробней здесь), иначе увеличивается на единицу.

Для примера: "Новорождённое" привидение -- 10000 единиц прозрачности.

1 год -- 10000 - 1 = 9999 (1 число Фибоначчи).
2 года -- 9999 - 2 = 9997 (2 число Фибоначчи).
3 года -- 9997 - 3 = 9994 (3 число Фибоначчи).
4 года -- 9994 + 1 = 9995 (4 не число Фибоначчи).
5 лет -- 9995 - 5 = 9990 (5 число Фибоначчи).

Помогите Николе написать функцию, которая будет определять возраст привидения
по прозрачности. Вам известно измерение прозрачности, как число от 0 до 10000
включительно. Привидения не бывают старше 5000 лет, так как потом просто
исчезают (серьезно, научный факт).

Пример:

 прозрачность = 10000, возраст: 0
 прозрачность = 9999, возраст: 1
 прозрачность = 9997, возраст: 2
 прозрачность = 9994, возраст: 3
 прозрачность = 9995, возраст: 4
 прозрачность = 9990, возраст: 5
"""


class GhostAgeCalculator:
    """
    Класс, позволяющий рассчитать возраст призрака, по его прозрачности.
    """
    def __init__(self, degree_of_transparency):
        self.degree_of_transparency = degree_of_transparency
        self.ghost_age = self.calculate_ghost_age()

    @classmethod
    def set_degree_of_transparency(cls):
        """
        Функции для ввода степени прозрачности призрака.
        :return: Целое положительное число -> степень прозрачности призрака.
        """
        while 1:
            # Ввод и проверка значения степени прозрачности.
            try:
                user_input = input('Введите степень прозрачности призрака: ')
                degree_of_transparency = int(user_input)

                if not 0 <= degree_of_transparency <= 10000:
                    raise Exception

                return cls(degree_of_transparency)

            except ValueError:
                print('Ошибка. Степень прозрачности должна быть '
                      'числом!\nПопробуйте еще раз.')

            except Exception:
                print('Ошибка. Степень прозрачности должна быть '
                      'в диапазоне [0; 10000]!\nПопробуйте еще раз.')

    def calculate_ghost_age(self):
        """
        Функция, вычисляющая возраст призрака.
        :return: Целое положительное число -> возраст призрака.
        """
        fibonacci_numbers = [0, 1]
        transparency_to_lose = 10000
        death_age = 5000
        ghost_age = 0

        # Призрак только что родился.
        if self.degree_of_transparency == transparency_to_lose:
            return 0

        # Вычисляем возраст призрака.
        while transparency_to_lose != self.degree_of_transparency:
            # Если возраст является числом Фибоначчи, вычитаем это значение
            # из степени прозрачности. Иначе прибавляем к ней единицу.
            if ghost_age in fibonacci_numbers:
                transparency_to_lose -= ghost_age
            else:
                transparency_to_lose += 1

            # Генерируем новое число Фибоначчи.
            fibonacci_numbers.append(fibonacci_numbers[-2] +
                                     fibonacci_numbers[-1])
            ghost_age += 1

            # Призрак исчез, возраст неизвестен.
            if ghost_age == death_age:
                return None

        return ghost_age - 1


ghost_Ivan = GhostAgeCalculator.set_degree_of_transparency()
print(f'Степень прозрачности призрака - {ghost_Ivan.degree_of_transparency}'
      f'\nВозраст призрака - {ghost_Ivan.ghost_age}')
