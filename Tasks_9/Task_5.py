"""
[Junior+] 5.Min-max.
Дано: позиционный аргумент, как итерируемое или два или более позиционных
аргументов. Необязательный ключевой аргумент как функция.

Задание.

Роботы решили покопаться в себе и может быть даже улучшить что-нибудь.
В этой задаче Вам нужно написать свою реализацию встроенных функций
(версии для py3) min и max. Некоторые встроенные функции заблокированы здесь:
import, eval, exec, globals. Не забудьте, что в этой задаче вам нужно
реализовать две функции, а не одну как обычно.

max(iterable, [, key]) or min(iterable, [, key]) max(arg1, arg2, args[, key])
or min(arg1, arg2, args[, key])

Возвращает наибольший (наименьший) элемент в итерируемом (iterable)
или наибольшее (наименьшее) из двух и более аргументов.

Если дан только один позиционный аргумент, то он должен быть итерируемым.
В этом случае функция возвращает наибольший (наименьший) элемент из данного
итерируемого. Если даны два или более позиционных аргументов, то возвращен
будет наибольший (наименьший) из данных аргументов.

Необязательный ключевой аргумент key определяет функцию одного аргумента,
которая используется для извлечения ключа для сравнения из каждого элемента
массива (для примера, key=str.lower).

Если массив содержит несколько максимальных (минимальных) значений,
то функция возвращает первый по порядку в массиве.

-- Python документация (Встроенные функции)

Примеры:

 max(3, 2) == 3
 min(3, 2) == 2
 max([1, 2, 0, 3, 4]) == 4
 min("hello") == "e"
 max(2.2, 5.6, 5.9, key=int) == 5.6
 min([[1,2], [3, 4], [9, 0]], key=lambda x: x[1]) == [9, 0]
"""


def my_max(*args, key=lambda x: x):
    """
    Функция, которая ищет максимальное значение, в переданном
    пользователем списке.
    :param args: Аргументы, в которых нужно искать максимальное значение.
    :param key: Определяет функцию одного аргумента, которая используется
    для извлечения ключа для сравнения из каждого элемента массива.
    :return: Максимальный элемент.
    """
    if len(args) == 1:  # Если все элементы находятся в одном списке.
        iterable = args[0]
    else:
        iterable = args

    max_value = None
    max_index = None

    for index, value in enumerate(map(key, iterable)):
        if not max_value:
            max_value = value
            max_index = index
        elif value > max_value:
            max_value = value
            max_index = index

    # Если в функцию ничего не передали, выведется 'None'
    return iterable[max_index] if max_index is not None else None


def my_min(*args, key=lambda x: x):
    """
    Функция, которая ищет минимальное значение, в переданном
    пользователем списке.
    :param args: Аргументы, в которых нужно искать минимальное значение.
    :param key: Определяет функцию одного аргумента, которая используется
    для извлечения ключа для сравнения из каждого элемента массива.
    :return: Минимальный элемент.
    """
    if len(args) == 1:  # Если все элементы находятся в одном списке.
        iterable = args[0]
    else:
        iterable = args

    min_value = None
    min_index = None

    for index, value in enumerate(map(key, iterable)):
        if not min_value:
            min_value = value
            min_index = index
        elif value < min_value:
            min_value = value
            min_index = index

    # Если в функцию ничего не передали, выведется 'None'
    return iterable[min_index] if min_index is not None else None


'''
Можно сделать этот код лучше, сделав одну общую функцию, которая
будет работать и с максимальным и минимальным значением. Тем самым избавившись
от дублирования кода, т.к. две моих функции идентичны, кроме знака сравнения.

Т.е. мы заменяем 'value < min_value' и 'value > max_value', 
на функцию 'compare_values()', например, и там уже сравниваем 2 переменные.

Для этого добавим еще один аргумент в главную функцию, который определяет, 
какое значение (min или max) нам нужно. И в зависимости от этого аргумента,
'compare_values()' будет вычислять что нам нужно.

Пример: 
 >>> min_value = define_value([...], 'min')  
 >>> print(min_value)
'''


print(f'max(3, 2) = {my_max(3, 2)}')
print(f'min(3, 2) = {my_min(3, 2)}')
print(f'max([1, 2, 0, 3, 4]) = {my_max([1, 2, 0, 3, 4])}')
print(f'min("hello") = {my_min("hello")}')
print(f'max(2.2, 5.6, 5.9, key=int) = {my_max(2.2, 5.6, 5.9, key=int)}')
print('min([[1,2], [3, 4], [9, 0]], key=lambda x: x[1]) = '
      f'{my_min([[1,2], [3, 4], [9, 0]], key=lambda x: x[1])}')
